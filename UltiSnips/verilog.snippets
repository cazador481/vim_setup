snippet struct "structure"
struct {
$3
} ${2:name};
endsnippet



snippet program "program auto"
program automatic ${1:program_name}();
   ${1://body}
endprogram
endsnippet

snippet initial "initial block"
initial begin
$1
end
endsnippet

snippet new "new call"
$1=new("$1",this);
endsnippet

snippet if "if"
if ($1) begin
	${VISUAL}
end
endsnippet
snippet ife "Conditional if..else (ife)"
if ($1) 
	${2:// body...}
end else begin
	${3:// else...}
end
endsnippet

snippet elif "else if block"
else if ($1) begin
	$2
end
endsnippet

snippet else "else block"
else begin
	$1
end

snippet module "module"
module ${1:module_name};
   $2
endmodule : $1
endsnippet

snippet interface "interface"
interface ${1:module_name}(input bit ${2:clk});
   $3
endinterface : $1
endsnippet

snippet clocking "clocking"
clocking ${1:module_name} @(${2:posedge} ${3:clk});
   $4
endclocking : $1
endsnippet

snippet task "task"
task ${1:task_name}($2);
   $3
endtask : $1
endsnippet

snippet for "for"
for ($1; $2; $3) begin
   $4
end
endsnippet



snippet class "class"
class ${1:class_name};
   $2;
endclass: $1
endsnippet

snippet function "function"
function ${1:void} ${2:func_name}();
	${3:${VISUAL}}
endfunction : $2
endsnippet

snippet package "package"
package ${1:package_name};
	import ovm_pkg::*;
	\`include "ovm_macros.svh"
    ${2://include package contents here}
endpackage: $1
endsnippet

snippet while "while"
while ($1) begin
   ${2://statement}
end
endsnippet
#####

snippet tlm_block_imp "blocking implementation"

    virtual function bit try_put(${1:trans_type} t);
    endfunction: try_put
	
   virtual function bit can_put();
   endfunction: can_put 

   virtual function bit try_get($1 t);
   endfunction: try_get

   virtual function bit can_get();
   endfunction: can_get

   virtual function bit try_peek($1 t);
   endfunction: try_peek

   virtual function bit can_peek($1 t);
   endfunction: can_peek
endsnippet
snippet ovm_test "class to extends ovm_test"
class $1 extends ovm_test;
	function new(string name,ovm_component parent);
		super.new(name,parent);
	endfunction

	function void build();
		super.build();
	endfunction: build
endclass: $1
endsnippet


snippet ovm_component "ovm agent  class"
class ${1:agent name} extends ovm_component;
   \`ovm_component_utils($1)
   
   function new(string name, ovm_component parent );
      super.new(name,parent);
   endfunction: new

   function void build(); //create child componenets
      super.build();
      //instanciate lower level components here
      // my_sequencer::type_id::create("my_sequence_h", this);
   endfunction: build

   function void connect(); // connect child components
   endfunction: connect
endclass: $1
endsnippet

snippet ovm_agent "ovm agent  class"
class ${1:agent name} extends ovm_agent;
   \`ovm_component_utils($1)
   
   function new(string name, ovm_component parent );
      super.new(name,parent);
   endfunction: new

   function void build(); //create child componenets
      super.build();
      //instanciate lower level components here
      // my_sequencer::type_id::create("my_sequence_h", this);
   endfunction: build

   function void connect(); // connect child components
   endfunction: connect
endclass: $1
endsnippet


snippet ovm_env "ovm env class"
class ${1:class_name} extends ovm_env;
    \`ovm_component_utils($1)
    
    function new(string name, uvm_component parent);
        super.new(name,parent);
    endfunction: new

    function void build;
        super.build();
    endfunction : build

	virtual function void connect;
	endfunction: connect

    task run;

    endtask: run

    $2
endclass: $1
endsnippet



######################################
#    UVM
######################################

snippet build_phase "uvm build phase"
function void build_phase(uvm_phase phase);
      super.build_phase(phase);
      assert( uvm_config_db #(virtual dut_if)::get(this, "", "dut_vi", dut_vi) );
    endfunction : build_phase
endsnippet


snippet u_package "uvm package"
package $1
    import uvm_pgk::*;
    $2
endpackage: $1
endsnippet

snippet uvm_class "uvm class"
class ${1:class_name} extends uvm_env;
    \`uvm_component_utils($1)
    
    function new(string name, uvm_component parent);
        super.new(name.parent);
    endfunction: new

    function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        assert( uvm_config_db #(virtual dut_if)::get(this, "", "dut_vi", dut_vi) );
    endfunction : build_phase

    function run_phase(uvm_phase phase);

    endtask: run_phase 

    $2
endclass: $1
endsnippet

snippet ctest "uvm test class"
class $1 extends uvm_test;
  
    \`uvm_component_utils($1)
    
${2://declare env here} $2_h;
    
    function new(string name, uvm_component parent);
        super.new(name, parent);
    endfunction: new
    
    function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        if( !uvm_resource_db#(virtual ${3:dut}_if)::read_by_name("$3_ifs", "$3_vi", $3_vi, this))
            `uvm_fatal("NOVIF", "No virtual interface set")
        uvm_config_db #(virtual $3_if)::set(this, "*", "$3_vi", $3_vi); 
        $2_h = $2::type_id::create("$2_h", this);

    endfunction: build_phase
    task run_phase(uvm_phase phase);
        ${4:call create here}
    endtask: run_phase
    
endclass: $1
endsnippet

snippet create "uvmtest create"
${1type} ${2var};
$2=$1::type_id::craete("$2");
${3://modify sequence here if need be}
$3.start(${4:full.path.to.sequencer_h});
endsnippet


snippet u_agent "uvm agent  class"
class ${1:agent name} extends uvm_agent;
   \`uvm_component_utils($1)
   
   function new(string name, uvm_component_utils parent );
      super.new(name,parent);
   endfunction: new

   function void build_phase(uvm_phase phase); //create child componenets
      super.build_phase(phase);
      //instanciate lower level components here
      // my_sequencer::type_id::create("my_sequence_h", this);
   endfunction: build_phase

   function void connect_phase(uvm_phase phase); // connect child components
   endfunction: connect_phase
endclass: $1
endsnippet

snippet u_sequence "uvm sequence class"
class ${1:class_name} extends uvm_sequence #(${2:transaction_name};
   \`uvm_object_utils(my_sequence)

   function new(String name="");
     supter.name(name);
   endfunction: new

   task body; // the behavior of the sequence
      uvm_test_done.raise_objection(this);
      ${2//task body, usually call create here}
      uvm_test_done.drop_objection(this);
   endtask: body
endclass: $1
endsnippet

snippet create "uvm sequence create"
${1:type} ${2:var}
$2=$1::type_id::create("$2");
start_item($2);
${3://modify tx here}
finish_item(seq);
endsnippet


snippet u_monitor "uvm monitor class"
class ${1:monitor_name} extends uvm_monitor;
   \`uvm_component_utils($1);
   uvm_analysis_port #{2:tx_class} $2;

   function new
   endfunction

   function void build_phase(uvm_phase phase);
      super.build_phase(phase);
      $2=new("$2",this);
   endfunction

   task run_phase(uvm_phase phase);
      forever
      begin
         $3 tx;

         //stuff goes here
         $2.write(tx); // broadcast
      endforever
   endtask;
endsnippet


